
4_GPIO_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001578  08001578  00002578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015b8  080015b8  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015b8  080015b8  000025b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015c0  080015c0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c0  080015c0  000025c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015c4  080015c4  000025c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015c8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001624  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001624  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014fb  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000794  00000000  00000000  00004587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00004d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014d  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010065  00000000  00000000  0000505d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002997  00000000  00000000  000150c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055c52  00000000  00000000  00017a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006d6ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d3c  00000000  00000000  0006d6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0006e42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001560 	.word	0x08001560

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001560 	.word	0x08001560

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <led_init>:
#include <stdio.h>
#include <stdbool.h>
#include "stm32f4xx.h"

void led_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	RCC ->AHB1ENR |= (1u<<0);
 8000284:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <led_init+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	@ (80002b4 <led_init+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA ->MODER |= (1<<10);
 8000290:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <led_init+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <led_init+0x38>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA ->MODER &=~ (1<<11);
 800029c:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <led_init+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <led_init+0x38>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002a6:	6013      	str	r3, [r2, #0]

}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <led_low>:

void led_low(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	GPIOA ->ODR &=~ (1<<5);
 80002c0:	4b05      	ldr	r3, [pc, #20]	@ (80002d8 <led_low+0x1c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <led_low+0x1c>)
 80002c6:	f023 0320 	bic.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]

}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020000 	.word	0x40020000

080002dc <led_high>:


void led_high(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	GPIOA ->ODR |= (1<<5);
 80002e0:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <led_high+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <led_high+0x1c>)
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	6153      	str	r3, [r2, #20]

}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <push_init>:


void push_init(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	RCC ->AHB1ENR |= (1u<<2);
 8000300:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <push_init+0x34>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000304:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <push_init+0x34>)
 8000306:	f043 0304 	orr.w	r3, r3, #4
 800030a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC ->MODER &=~ (1<<26);
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <push_init+0x38>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a08      	ldr	r2, [pc, #32]	@ (8000334 <push_init+0x38>)
 8000312:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000316:	6013      	str	r3, [r2, #0]
	GPIOC ->MODER &=~ (1<<27);
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <push_init+0x38>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <push_init+0x38>)
 800031e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000322:	6013      	str	r3, [r2, #0]

}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020800 	.word	0x40020800

08000338 <fpu_enable>:
#include "stm32f4xx.h"

void fpu_enable(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0

  SCB -> CPACR |= (1<<20);
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <fpu_enable+0x50>)
 800033e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000342:	4a11      	ldr	r2, [pc, #68]	@ (8000388 <fpu_enable+0x50>)
 8000344:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000348:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SCB -> CPACR |= (1<<21);
 800034c:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <fpu_enable+0x50>)
 800034e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000352:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <fpu_enable+0x50>)
 8000354:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SCB -> CPACR |= (1<<22);
 800035c:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <fpu_enable+0x50>)
 800035e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000362:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <fpu_enable+0x50>)
 8000364:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SCB -> CPACR |= (1<<23);
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <fpu_enable+0x50>)
 800036e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000372:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <fpu_enable+0x50>)
 8000374:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	e000ed00 	.word	0xe000ed00

0800038c <main>:




int main()
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

	fpu_enable();
 8000390:	f7ff ffd2 	bl	8000338 <fpu_enable>
	uart_enable();
 8000394:	f000 f908 	bl	80005a8 <uart_enable>
	get_tick();
 8000398:	f000 f8c4 	bl	8000524 <get_tick>
	led_init();
 800039c:	f7ff ff70 	bl	8000280 <led_init>
	push_init();
 80003a0:	f7ff ffac 	bl	80002fc <push_init>


while(1)
{
   printf ("Hello world");
 80003a4:	4805      	ldr	r0, [pc, #20]	@ (80003bc <main+0x30>)
 80003a6:	f000 fa6f 	bl	8000888 <iprintf>
   delay(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 f8ce 	bl	800054c <delay>
   led_low();
 80003b0:	f7ff ff84 	bl	80002bc <led_low>
   led_high();
 80003b4:	f7ff ff92 	bl	80002dc <led_high>
   printf ("Hello world");
 80003b8:	bf00      	nop
 80003ba:	e7f3      	b.n	80003a4 <main+0x18>
 80003bc:	08001578 	.word	0x08001578

080003c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e00a      	b.n	80003e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003d2:	f3af 8000 	nop.w
 80003d6:	4601      	mov	r1, r0
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	1c5a      	adds	r2, r3, #1
 80003dc:	60ba      	str	r2, [r7, #8]
 80003de:	b2ca      	uxtb	r2, r1
 80003e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dbf0      	blt.n	80003d2 <_read+0x12>
  }

  return len;
 80003f0:	687b      	ldr	r3, [r7, #4]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	60f8      	str	r0, [r7, #12]
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
 800040a:	e009      	b.n	8000420 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	1c5a      	adds	r2, r3, #1
 8000410:	60ba      	str	r2, [r7, #8]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f000 f8bb 	bl	8000590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3301      	adds	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	429a      	cmp	r2, r3
 8000426:	dbf1      	blt.n	800040c <_write+0x12>
  }
  return len;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <_close>:

int _close(int file)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800043a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800044a:	b480      	push	{r7}
 800044c:	b083      	sub	sp, #12
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800045a:	605a      	str	r2, [r3, #4]
  return 0;
 800045c:	2300      	movs	r3, #0
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <_isatty>:

int _isatty(int file)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000472:	2301      	movs	r3, #1
}
 8000474:	4618      	mov	r0, r3
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800048c:	2300      	movs	r3, #0
}
 800048e:	4618      	mov	r0, r3
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
	...

0800049c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a4:	4a14      	ldr	r2, [pc, #80]	@ (80004f8 <_sbrk+0x5c>)
 80004a6:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <_sbrk+0x60>)
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b0:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <_sbrk+0x64>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d102      	bne.n	80004be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <_sbrk+0x64>)
 80004ba:	4a12      	ldr	r2, [pc, #72]	@ (8000504 <_sbrk+0x68>)
 80004bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <_sbrk+0x64>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	693a      	ldr	r2, [r7, #16]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d207      	bcs.n	80004dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004cc:	f000 fa80 	bl	80009d0 <__errno>
 80004d0:	4603      	mov	r3, r0
 80004d2:	220c      	movs	r2, #12
 80004d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004da:	e009      	b.n	80004f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004dc:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <_sbrk+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004e2:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <_sbrk+0x64>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <_sbrk+0x64>)
 80004ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ee:	68fb      	ldr	r3, [r7, #12]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20020000 	.word	0x20020000
 80004fc:	00000400 	.word	0x00000400
 8000500:	20000078 	.word	0x20000078
 8000504:	200001d0 	.word	0x200001d0

08000508 <tick_increment>:




static inline void tick_increment(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
    g_current_tick   +=TICK_FREQ_INCREMENT;
 800050c:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <tick_increment+0x18>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	4a03      	ldr	r2, [pc, #12]	@ (8000520 <tick_increment+0x18>)
 8000514:	6013      	str	r3, [r2, #0]
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	2000007c 	.word	0x2000007c

08000524 <get_tick>:


uint32_t get_tick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052a:	b672      	cpsid	i
}
 800052c:	bf00      	nop

    __disable_irq();
    uint32_t current = g_current_tick;
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <get_tick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000534:	b662      	cpsie	i
}
 8000536:	bf00      	nop
    __enable_irq();
    return current;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2000007c 	.word	0x2000007c

0800054c <delay>:

void delay(uint32_t delay){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

	uint32_t tickstart = get_tick();
 8000554:	f7ff ffe6 	bl	8000524 <get_tick>
 8000558:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60bb      	str	r3, [r7, #8]

	if(wait < MAX_DELAY){
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000564:	d002      	beq.n	800056c <delay+0x20>

		wait += (uint32_t)TICK_FREQ_INCREMENT;
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	3301      	adds	r3, #1
 800056a:	60bb      	str	r3, [r7, #8]

	}
	while(get_tick() - tickstart){
 800056c:	bf00      	nop
 800056e:	f7ff ffd9 	bl	8000524 <get_tick>
 8000572:	4602      	mov	r2, r0
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4293      	cmp	r3, r2
 8000578:	d1f9      	bne.n	800056e <delay+0x22>


	}


}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <SysTick_Handler>:

}


void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    tick_increment();
 8000588:	f7ff ffbe 	bl	8000508 <tick_increment>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <__io_putchar>:

#define deg_baud_rate   115200
#define sys_clk         16000000

int __io_putchar (int b)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uart_write_byte(b);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 f849 	bl	8000630 <uart_write_byte>
	return b;
 800059e:	687b      	ldr	r3, [r7, #4]

}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <uart_enable>:


void uart_enable (void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

 // enabling the UART clock and do the rest



	RCC -> APB1ENR |= (1<<0);
 80005ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <uart_enable+0x78>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <uart_enable+0x78>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6413      	str	r3, [r2, #64]	@ 0x40

	//as the mode is PA2 means the GPIOA 2 pin need to set as alternate function mode
	GPIOA -> MODER  |= (1U<<5);
 80005b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <uart_enable+0x7c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a19      	ldr	r2, [pc, #100]	@ (8000624 <uart_enable+0x7c>)
 80005be:	f043 0320 	orr.w	r3, r3, #32
 80005c2:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &=~ (1u<<4);
 80005c4:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <uart_enable+0x7c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <uart_enable+0x7c>)
 80005ca:	f023 0310 	bic.w	r3, r3, #16
 80005ce:	6013      	str	r3, [r2, #0]

	// set AF07
	GPIOA -> AFR[0] |= (1U<<8);
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <uart_enable+0x7c>)
 80005d2:	6a1b      	ldr	r3, [r3, #32]
 80005d4:	4a13      	ldr	r2, [pc, #76]	@ (8000624 <uart_enable+0x7c>)
 80005d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005da:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U<<9);
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <uart_enable+0x7c>)
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	4a10      	ldr	r2, [pc, #64]	@ (8000624 <uart_enable+0x7c>)
 80005e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005e6:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U<<10);
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <uart_enable+0x7c>)
 80005ea:	6a1b      	ldr	r3, [r3, #32]
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <uart_enable+0x7c>)
 80005ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005f2:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &=~ (1U<<11);
 80005f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <uart_enable+0x7c>)
 80005f6:	6a1b      	ldr	r3, [r3, #32]
 80005f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <uart_enable+0x7c>)
 80005fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005fe:	6213      	str	r3, [r2, #32]


	//baud rate setting up
	uart_set_baudrate(sys_clk,deg_baud_rate);
 8000600:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000604:	4808      	ldr	r0, [pc, #32]	@ (8000628 <uart_enable+0x80>)
 8000606:	f000 f83f 	bl	8000688 <uart_set_baudrate>


	USART2 -> CR1 = (1U<<3) ;
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <uart_enable+0x84>)
 800060c:	2208      	movs	r2, #8
 800060e:	60da      	str	r2, [r3, #12]
	USART2 -> CR1 |= (1U<<13);
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <uart_enable+0x84>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	4a05      	ldr	r2, [pc, #20]	@ (800062c <uart_enable+0x84>)
 8000616:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800061a:	60d3      	str	r3, [r2, #12]

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	00f42400 	.word	0x00f42400
 800062c:	40004400 	.word	0x40004400

08000630 <uart_write_byte>:

void uart_write_byte(int b)
{   //we need two things to write in UART. first in the status reg the TXE bit should be empty and then the data reg bit where we put the character.
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    // Wait until TXE (data register empty)
    while ((USART2->SR & (1U<<7)) == 0u) { /* spin */ }
 8000638:	bf00      	nop
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <uart_write_byte+0x2c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <uart_write_byte+0xa>
    USART2->DR = (b & 0xFF);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <uart_write_byte+0x2c>)
 800064a:	b2db      	uxtb	r3, r3
 800064c:	6053      	str	r3, [r2, #4]

    // Optionally wait for TC to ensure byte fully shifted out
    // while ((USART2->SR & USART_SR_TC) == 0u) { }
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40004400 	.word	0x40004400

08000660 <compute_baud_rate>:



static uint16_t compute_baud_rate(uint32_t clk, uint32_t baudrate){
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]

	return ((clk + (baudrate/2U)) /baudrate);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	085a      	lsrs	r2, r3, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	441a      	add	r2, r3
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	fbb2 f3f3 	udiv	r3, r2, r3
 8000678:	b29b      	uxth	r3, r3

}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
	...

08000688 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t clk, uint32_t baudrate){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]

	USART2 -> BRR = compute_baud_rate(clk,baudrate);
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ffe3 	bl	8000660 <compute_baud_rate>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <uart_set_baudrate+0x24>)
 80006a0:	609a      	str	r2, [r3, #8]

}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40004400 	.word	0x40004400

080006b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b0:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	@ (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	@ (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80006de:	f000 f97d 	bl	80009dc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80006e2:	f7ff fe53 	bl	800038c <main>

080006e6 <LoopForever>:

LoopForever:
  b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   r0, =_estack
 80006e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006f4:	080015c8 	.word	0x080015c8
  ldr r2, =_sbss
 80006f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006fc:	200001cc 	.word	0x200001cc

08000700 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC_IRQHandler>
	...

08000704 <std>:
 8000704:	2300      	movs	r3, #0
 8000706:	b510      	push	{r4, lr}
 8000708:	4604      	mov	r4, r0
 800070a:	e9c0 3300 	strd	r3, r3, [r0]
 800070e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000712:	6083      	str	r3, [r0, #8]
 8000714:	8181      	strh	r1, [r0, #12]
 8000716:	6643      	str	r3, [r0, #100]	@ 0x64
 8000718:	81c2      	strh	r2, [r0, #14]
 800071a:	6183      	str	r3, [r0, #24]
 800071c:	4619      	mov	r1, r3
 800071e:	2208      	movs	r2, #8
 8000720:	305c      	adds	r0, #92	@ 0x5c
 8000722:	f000 f906 	bl	8000932 <memset>
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <std+0x58>)
 8000728:	6263      	str	r3, [r4, #36]	@ 0x24
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <std+0x5c>)
 800072c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <std+0x60>)
 8000730:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <std+0x64>)
 8000734:	6323      	str	r3, [r4, #48]	@ 0x30
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <std+0x68>)
 8000738:	6224      	str	r4, [r4, #32]
 800073a:	429c      	cmp	r4, r3
 800073c:	d006      	beq.n	800074c <std+0x48>
 800073e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000742:	4294      	cmp	r4, r2
 8000744:	d002      	beq.n	800074c <std+0x48>
 8000746:	33d0      	adds	r3, #208	@ 0xd0
 8000748:	429c      	cmp	r4, r3
 800074a:	d105      	bne.n	8000758 <std+0x54>
 800074c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000754:	f000 b966 	b.w	8000a24 <__retarget_lock_init_recursive>
 8000758:	bd10      	pop	{r4, pc}
 800075a:	bf00      	nop
 800075c:	080008ad 	.word	0x080008ad
 8000760:	080008cf 	.word	0x080008cf
 8000764:	08000907 	.word	0x08000907
 8000768:	0800092b 	.word	0x0800092b
 800076c:	20000080 	.word	0x20000080

08000770 <stdio_exit_handler>:
 8000770:	4a02      	ldr	r2, [pc, #8]	@ (800077c <stdio_exit_handler+0xc>)
 8000772:	4903      	ldr	r1, [pc, #12]	@ (8000780 <stdio_exit_handler+0x10>)
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <stdio_exit_handler+0x14>)
 8000776:	f000 b869 	b.w	800084c <_fwalk_sglue>
 800077a:	bf00      	nop
 800077c:	20000000 	.word	0x20000000
 8000780:	080012c1 	.word	0x080012c1
 8000784:	20000010 	.word	0x20000010

08000788 <cleanup_stdio>:
 8000788:	6841      	ldr	r1, [r0, #4]
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <cleanup_stdio+0x34>)
 800078c:	4299      	cmp	r1, r3
 800078e:	b510      	push	{r4, lr}
 8000790:	4604      	mov	r4, r0
 8000792:	d001      	beq.n	8000798 <cleanup_stdio+0x10>
 8000794:	f000 fd94 	bl	80012c0 <_fflush_r>
 8000798:	68a1      	ldr	r1, [r4, #8]
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <cleanup_stdio+0x38>)
 800079c:	4299      	cmp	r1, r3
 800079e:	d002      	beq.n	80007a6 <cleanup_stdio+0x1e>
 80007a0:	4620      	mov	r0, r4
 80007a2:	f000 fd8d 	bl	80012c0 <_fflush_r>
 80007a6:	68e1      	ldr	r1, [r4, #12]
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <cleanup_stdio+0x3c>)
 80007aa:	4299      	cmp	r1, r3
 80007ac:	d004      	beq.n	80007b8 <cleanup_stdio+0x30>
 80007ae:	4620      	mov	r0, r4
 80007b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b4:	f000 bd84 	b.w	80012c0 <_fflush_r>
 80007b8:	bd10      	pop	{r4, pc}
 80007ba:	bf00      	nop
 80007bc:	20000080 	.word	0x20000080
 80007c0:	200000e8 	.word	0x200000e8
 80007c4:	20000150 	.word	0x20000150

080007c8 <global_stdio_init.part.0>:
 80007c8:	b510      	push	{r4, lr}
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <global_stdio_init.part.0+0x30>)
 80007cc:	4c0b      	ldr	r4, [pc, #44]	@ (80007fc <global_stdio_init.part.0+0x34>)
 80007ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000800 <global_stdio_init.part.0+0x38>)
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	4620      	mov	r0, r4
 80007d4:	2200      	movs	r2, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	f7ff ff94 	bl	8000704 <std>
 80007dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007e0:	2201      	movs	r2, #1
 80007e2:	2109      	movs	r1, #9
 80007e4:	f7ff ff8e 	bl	8000704 <std>
 80007e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007ec:	2202      	movs	r2, #2
 80007ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f2:	2112      	movs	r1, #18
 80007f4:	f7ff bf86 	b.w	8000704 <std>
 80007f8:	200001b8 	.word	0x200001b8
 80007fc:	20000080 	.word	0x20000080
 8000800:	08000771 	.word	0x08000771

08000804 <__sfp_lock_acquire>:
 8000804:	4801      	ldr	r0, [pc, #4]	@ (800080c <__sfp_lock_acquire+0x8>)
 8000806:	f000 b90e 	b.w	8000a26 <__retarget_lock_acquire_recursive>
 800080a:	bf00      	nop
 800080c:	200001c1 	.word	0x200001c1

08000810 <__sfp_lock_release>:
 8000810:	4801      	ldr	r0, [pc, #4]	@ (8000818 <__sfp_lock_release+0x8>)
 8000812:	f000 b909 	b.w	8000a28 <__retarget_lock_release_recursive>
 8000816:	bf00      	nop
 8000818:	200001c1 	.word	0x200001c1

0800081c <__sinit>:
 800081c:	b510      	push	{r4, lr}
 800081e:	4604      	mov	r4, r0
 8000820:	f7ff fff0 	bl	8000804 <__sfp_lock_acquire>
 8000824:	6a23      	ldr	r3, [r4, #32]
 8000826:	b11b      	cbz	r3, 8000830 <__sinit+0x14>
 8000828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800082c:	f7ff bff0 	b.w	8000810 <__sfp_lock_release>
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <__sinit+0x28>)
 8000832:	6223      	str	r3, [r4, #32]
 8000834:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <__sinit+0x2c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f5      	bne.n	8000828 <__sinit+0xc>
 800083c:	f7ff ffc4 	bl	80007c8 <global_stdio_init.part.0>
 8000840:	e7f2      	b.n	8000828 <__sinit+0xc>
 8000842:	bf00      	nop
 8000844:	08000789 	.word	0x08000789
 8000848:	200001b8 	.word	0x200001b8

0800084c <_fwalk_sglue>:
 800084c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000850:	4607      	mov	r7, r0
 8000852:	4688      	mov	r8, r1
 8000854:	4614      	mov	r4, r2
 8000856:	2600      	movs	r6, #0
 8000858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800085c:	f1b9 0901 	subs.w	r9, r9, #1
 8000860:	d505      	bpl.n	800086e <_fwalk_sglue+0x22>
 8000862:	6824      	ldr	r4, [r4, #0]
 8000864:	2c00      	cmp	r4, #0
 8000866:	d1f7      	bne.n	8000858 <_fwalk_sglue+0xc>
 8000868:	4630      	mov	r0, r6
 800086a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800086e:	89ab      	ldrh	r3, [r5, #12]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d907      	bls.n	8000884 <_fwalk_sglue+0x38>
 8000874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	d003      	beq.n	8000884 <_fwalk_sglue+0x38>
 800087c:	4629      	mov	r1, r5
 800087e:	4638      	mov	r0, r7
 8000880:	47c0      	blx	r8
 8000882:	4306      	orrs	r6, r0
 8000884:	3568      	adds	r5, #104	@ 0x68
 8000886:	e7e9      	b.n	800085c <_fwalk_sglue+0x10>

08000888 <iprintf>:
 8000888:	b40f      	push	{r0, r1, r2, r3}
 800088a:	b507      	push	{r0, r1, r2, lr}
 800088c:	4906      	ldr	r1, [pc, #24]	@ (80008a8 <iprintf+0x20>)
 800088e:	ab04      	add	r3, sp, #16
 8000890:	6808      	ldr	r0, [r1, #0]
 8000892:	f853 2b04 	ldr.w	r2, [r3], #4
 8000896:	6881      	ldr	r1, [r0, #8]
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	f000 f9e9 	bl	8000c70 <_vfiprintf_r>
 800089e:	b003      	add	sp, #12
 80008a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80008a4:	b004      	add	sp, #16
 80008a6:	4770      	bx	lr
 80008a8:	2000000c 	.word	0x2000000c

080008ac <__sread>:
 80008ac:	b510      	push	{r4, lr}
 80008ae:	460c      	mov	r4, r1
 80008b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b4:	f000 f868 	bl	8000988 <_read_r>
 80008b8:	2800      	cmp	r0, #0
 80008ba:	bfab      	itete	ge
 80008bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008be:	89a3      	ldrhlt	r3, [r4, #12]
 80008c0:	181b      	addge	r3, r3, r0
 80008c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008c6:	bfac      	ite	ge
 80008c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008ca:	81a3      	strhlt	r3, [r4, #12]
 80008cc:	bd10      	pop	{r4, pc}

080008ce <__swrite>:
 80008ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008d2:	461f      	mov	r7, r3
 80008d4:	898b      	ldrh	r3, [r1, #12]
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	4605      	mov	r5, r0
 80008da:	460c      	mov	r4, r1
 80008dc:	4616      	mov	r6, r2
 80008de:	d505      	bpl.n	80008ec <__swrite+0x1e>
 80008e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e4:	2302      	movs	r3, #2
 80008e6:	2200      	movs	r2, #0
 80008e8:	f000 f83c 	bl	8000964 <_lseek_r>
 80008ec:	89a3      	ldrh	r3, [r4, #12]
 80008ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008f6:	81a3      	strh	r3, [r4, #12]
 80008f8:	4632      	mov	r2, r6
 80008fa:	463b      	mov	r3, r7
 80008fc:	4628      	mov	r0, r5
 80008fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000902:	f000 b853 	b.w	80009ac <_write_r>

08000906 <__sseek>:
 8000906:	b510      	push	{r4, lr}
 8000908:	460c      	mov	r4, r1
 800090a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800090e:	f000 f829 	bl	8000964 <_lseek_r>
 8000912:	1c43      	adds	r3, r0, #1
 8000914:	89a3      	ldrh	r3, [r4, #12]
 8000916:	bf15      	itete	ne
 8000918:	6560      	strne	r0, [r4, #84]	@ 0x54
 800091a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800091e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000922:	81a3      	strheq	r3, [r4, #12]
 8000924:	bf18      	it	ne
 8000926:	81a3      	strhne	r3, [r4, #12]
 8000928:	bd10      	pop	{r4, pc}

0800092a <__sclose>:
 800092a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800092e:	f000 b809 	b.w	8000944 <_close_r>

08000932 <memset>:
 8000932:	4402      	add	r2, r0
 8000934:	4603      	mov	r3, r0
 8000936:	4293      	cmp	r3, r2
 8000938:	d100      	bne.n	800093c <memset+0xa>
 800093a:	4770      	bx	lr
 800093c:	f803 1b01 	strb.w	r1, [r3], #1
 8000940:	e7f9      	b.n	8000936 <memset+0x4>
	...

08000944 <_close_r>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4d06      	ldr	r5, [pc, #24]	@ (8000960 <_close_r+0x1c>)
 8000948:	2300      	movs	r3, #0
 800094a:	4604      	mov	r4, r0
 800094c:	4608      	mov	r0, r1
 800094e:	602b      	str	r3, [r5, #0]
 8000950:	f7ff fd6f 	bl	8000432 <_close>
 8000954:	1c43      	adds	r3, r0, #1
 8000956:	d102      	bne.n	800095e <_close_r+0x1a>
 8000958:	682b      	ldr	r3, [r5, #0]
 800095a:	b103      	cbz	r3, 800095e <_close_r+0x1a>
 800095c:	6023      	str	r3, [r4, #0]
 800095e:	bd38      	pop	{r3, r4, r5, pc}
 8000960:	200001bc 	.word	0x200001bc

08000964 <_lseek_r>:
 8000964:	b538      	push	{r3, r4, r5, lr}
 8000966:	4d07      	ldr	r5, [pc, #28]	@ (8000984 <_lseek_r+0x20>)
 8000968:	4604      	mov	r4, r0
 800096a:	4608      	mov	r0, r1
 800096c:	4611      	mov	r1, r2
 800096e:	2200      	movs	r2, #0
 8000970:	602a      	str	r2, [r5, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	f7ff fd84 	bl	8000480 <_lseek>
 8000978:	1c43      	adds	r3, r0, #1
 800097a:	d102      	bne.n	8000982 <_lseek_r+0x1e>
 800097c:	682b      	ldr	r3, [r5, #0]
 800097e:	b103      	cbz	r3, 8000982 <_lseek_r+0x1e>
 8000980:	6023      	str	r3, [r4, #0]
 8000982:	bd38      	pop	{r3, r4, r5, pc}
 8000984:	200001bc 	.word	0x200001bc

08000988 <_read_r>:
 8000988:	b538      	push	{r3, r4, r5, lr}
 800098a:	4d07      	ldr	r5, [pc, #28]	@ (80009a8 <_read_r+0x20>)
 800098c:	4604      	mov	r4, r0
 800098e:	4608      	mov	r0, r1
 8000990:	4611      	mov	r1, r2
 8000992:	2200      	movs	r2, #0
 8000994:	602a      	str	r2, [r5, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	f7ff fd12 	bl	80003c0 <_read>
 800099c:	1c43      	adds	r3, r0, #1
 800099e:	d102      	bne.n	80009a6 <_read_r+0x1e>
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	b103      	cbz	r3, 80009a6 <_read_r+0x1e>
 80009a4:	6023      	str	r3, [r4, #0]
 80009a6:	bd38      	pop	{r3, r4, r5, pc}
 80009a8:	200001bc 	.word	0x200001bc

080009ac <_write_r>:
 80009ac:	b538      	push	{r3, r4, r5, lr}
 80009ae:	4d07      	ldr	r5, [pc, #28]	@ (80009cc <_write_r+0x20>)
 80009b0:	4604      	mov	r4, r0
 80009b2:	4608      	mov	r0, r1
 80009b4:	4611      	mov	r1, r2
 80009b6:	2200      	movs	r2, #0
 80009b8:	602a      	str	r2, [r5, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	f7ff fd1d 	bl	80003fa <_write>
 80009c0:	1c43      	adds	r3, r0, #1
 80009c2:	d102      	bne.n	80009ca <_write_r+0x1e>
 80009c4:	682b      	ldr	r3, [r5, #0]
 80009c6:	b103      	cbz	r3, 80009ca <_write_r+0x1e>
 80009c8:	6023      	str	r3, [r4, #0]
 80009ca:	bd38      	pop	{r3, r4, r5, pc}
 80009cc:	200001bc 	.word	0x200001bc

080009d0 <__errno>:
 80009d0:	4b01      	ldr	r3, [pc, #4]	@ (80009d8 <__errno+0x8>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000000c 	.word	0x2000000c

080009dc <__libc_init_array>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	4d0d      	ldr	r5, [pc, #52]	@ (8000a14 <__libc_init_array+0x38>)
 80009e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000a18 <__libc_init_array+0x3c>)
 80009e2:	1b64      	subs	r4, r4, r5
 80009e4:	10a4      	asrs	r4, r4, #2
 80009e6:	2600      	movs	r6, #0
 80009e8:	42a6      	cmp	r6, r4
 80009ea:	d109      	bne.n	8000a00 <__libc_init_array+0x24>
 80009ec:	4d0b      	ldr	r5, [pc, #44]	@ (8000a1c <__libc_init_array+0x40>)
 80009ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000a20 <__libc_init_array+0x44>)
 80009f0:	f000 fdb6 	bl	8001560 <_init>
 80009f4:	1b64      	subs	r4, r4, r5
 80009f6:	10a4      	asrs	r4, r4, #2
 80009f8:	2600      	movs	r6, #0
 80009fa:	42a6      	cmp	r6, r4
 80009fc:	d105      	bne.n	8000a0a <__libc_init_array+0x2e>
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a04:	4798      	blx	r3
 8000a06:	3601      	adds	r6, #1
 8000a08:	e7ee      	b.n	80009e8 <__libc_init_array+0xc>
 8000a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0e:	4798      	blx	r3
 8000a10:	3601      	adds	r6, #1
 8000a12:	e7f2      	b.n	80009fa <__libc_init_array+0x1e>
 8000a14:	080015c0 	.word	0x080015c0
 8000a18:	080015c0 	.word	0x080015c0
 8000a1c:	080015c0 	.word	0x080015c0
 8000a20:	080015c4 	.word	0x080015c4

08000a24 <__retarget_lock_init_recursive>:
 8000a24:	4770      	bx	lr

08000a26 <__retarget_lock_acquire_recursive>:
 8000a26:	4770      	bx	lr

08000a28 <__retarget_lock_release_recursive>:
 8000a28:	4770      	bx	lr
	...

08000a2c <_free_r>:
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	4605      	mov	r5, r0
 8000a30:	2900      	cmp	r1, #0
 8000a32:	d041      	beq.n	8000ab8 <_free_r+0x8c>
 8000a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a38:	1f0c      	subs	r4, r1, #4
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	bfb8      	it	lt
 8000a3e:	18e4      	addlt	r4, r4, r3
 8000a40:	f000 f8e0 	bl	8000c04 <__malloc_lock>
 8000a44:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <_free_r+0x90>)
 8000a46:	6813      	ldr	r3, [r2, #0]
 8000a48:	b933      	cbnz	r3, 8000a58 <_free_r+0x2c>
 8000a4a:	6063      	str	r3, [r4, #4]
 8000a4c:	6014      	str	r4, [r2, #0]
 8000a4e:	4628      	mov	r0, r5
 8000a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a54:	f000 b8dc 	b.w	8000c10 <__malloc_unlock>
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <_free_r+0x42>
 8000a5c:	6820      	ldr	r0, [r4, #0]
 8000a5e:	1821      	adds	r1, r4, r0
 8000a60:	428b      	cmp	r3, r1
 8000a62:	bf01      	itttt	eq
 8000a64:	6819      	ldreq	r1, [r3, #0]
 8000a66:	685b      	ldreq	r3, [r3, #4]
 8000a68:	1809      	addeq	r1, r1, r0
 8000a6a:	6021      	streq	r1, [r4, #0]
 8000a6c:	e7ed      	b.n	8000a4a <_free_r+0x1e>
 8000a6e:	461a      	mov	r2, r3
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	b10b      	cbz	r3, 8000a78 <_free_r+0x4c>
 8000a74:	42a3      	cmp	r3, r4
 8000a76:	d9fa      	bls.n	8000a6e <_free_r+0x42>
 8000a78:	6811      	ldr	r1, [r2, #0]
 8000a7a:	1850      	adds	r0, r2, r1
 8000a7c:	42a0      	cmp	r0, r4
 8000a7e:	d10b      	bne.n	8000a98 <_free_r+0x6c>
 8000a80:	6820      	ldr	r0, [r4, #0]
 8000a82:	4401      	add	r1, r0
 8000a84:	1850      	adds	r0, r2, r1
 8000a86:	4283      	cmp	r3, r0
 8000a88:	6011      	str	r1, [r2, #0]
 8000a8a:	d1e0      	bne.n	8000a4e <_free_r+0x22>
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	6053      	str	r3, [r2, #4]
 8000a92:	4408      	add	r0, r1
 8000a94:	6010      	str	r0, [r2, #0]
 8000a96:	e7da      	b.n	8000a4e <_free_r+0x22>
 8000a98:	d902      	bls.n	8000aa0 <_free_r+0x74>
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	602b      	str	r3, [r5, #0]
 8000a9e:	e7d6      	b.n	8000a4e <_free_r+0x22>
 8000aa0:	6820      	ldr	r0, [r4, #0]
 8000aa2:	1821      	adds	r1, r4, r0
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	bf04      	itt	eq
 8000aa8:	6819      	ldreq	r1, [r3, #0]
 8000aaa:	685b      	ldreq	r3, [r3, #4]
 8000aac:	6063      	str	r3, [r4, #4]
 8000aae:	bf04      	itt	eq
 8000ab0:	1809      	addeq	r1, r1, r0
 8000ab2:	6021      	streq	r1, [r4, #0]
 8000ab4:	6054      	str	r4, [r2, #4]
 8000ab6:	e7ca      	b.n	8000a4e <_free_r+0x22>
 8000ab8:	bd38      	pop	{r3, r4, r5, pc}
 8000aba:	bf00      	nop
 8000abc:	200001c8 	.word	0x200001c8

08000ac0 <sbrk_aligned>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4e0f      	ldr	r6, [pc, #60]	@ (8000b00 <sbrk_aligned+0x40>)
 8000ac4:	460c      	mov	r4, r1
 8000ac6:	6831      	ldr	r1, [r6, #0]
 8000ac8:	4605      	mov	r5, r0
 8000aca:	b911      	cbnz	r1, 8000ad2 <sbrk_aligned+0x12>
 8000acc:	f000 fcb4 	bl	8001438 <_sbrk_r>
 8000ad0:	6030      	str	r0, [r6, #0]
 8000ad2:	4621      	mov	r1, r4
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	f000 fcaf 	bl	8001438 <_sbrk_r>
 8000ada:	1c43      	adds	r3, r0, #1
 8000adc:	d103      	bne.n	8000ae6 <sbrk_aligned+0x26>
 8000ade:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	bd70      	pop	{r4, r5, r6, pc}
 8000ae6:	1cc4      	adds	r4, r0, #3
 8000ae8:	f024 0403 	bic.w	r4, r4, #3
 8000aec:	42a0      	cmp	r0, r4
 8000aee:	d0f8      	beq.n	8000ae2 <sbrk_aligned+0x22>
 8000af0:	1a21      	subs	r1, r4, r0
 8000af2:	4628      	mov	r0, r5
 8000af4:	f000 fca0 	bl	8001438 <_sbrk_r>
 8000af8:	3001      	adds	r0, #1
 8000afa:	d1f2      	bne.n	8000ae2 <sbrk_aligned+0x22>
 8000afc:	e7ef      	b.n	8000ade <sbrk_aligned+0x1e>
 8000afe:	bf00      	nop
 8000b00:	200001c4 	.word	0x200001c4

08000b04 <_malloc_r>:
 8000b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b08:	1ccd      	adds	r5, r1, #3
 8000b0a:	f025 0503 	bic.w	r5, r5, #3
 8000b0e:	3508      	adds	r5, #8
 8000b10:	2d0c      	cmp	r5, #12
 8000b12:	bf38      	it	cc
 8000b14:	250c      	movcc	r5, #12
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	4606      	mov	r6, r0
 8000b1a:	db01      	blt.n	8000b20 <_malloc_r+0x1c>
 8000b1c:	42a9      	cmp	r1, r5
 8000b1e:	d904      	bls.n	8000b2a <_malloc_r+0x26>
 8000b20:	230c      	movs	r3, #12
 8000b22:	6033      	str	r3, [r6, #0]
 8000b24:	2000      	movs	r0, #0
 8000b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c00 <_malloc_r+0xfc>
 8000b2e:	f000 f869 	bl	8000c04 <__malloc_lock>
 8000b32:	f8d8 3000 	ldr.w	r3, [r8]
 8000b36:	461c      	mov	r4, r3
 8000b38:	bb44      	cbnz	r4, 8000b8c <_malloc_r+0x88>
 8000b3a:	4629      	mov	r1, r5
 8000b3c:	4630      	mov	r0, r6
 8000b3e:	f7ff ffbf 	bl	8000ac0 <sbrk_aligned>
 8000b42:	1c43      	adds	r3, r0, #1
 8000b44:	4604      	mov	r4, r0
 8000b46:	d158      	bne.n	8000bfa <_malloc_r+0xf6>
 8000b48:	f8d8 4000 	ldr.w	r4, [r8]
 8000b4c:	4627      	mov	r7, r4
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d143      	bne.n	8000bda <_malloc_r+0xd6>
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d04b      	beq.n	8000bee <_malloc_r+0xea>
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	4639      	mov	r1, r7
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	eb04 0903 	add.w	r9, r4, r3
 8000b60:	f000 fc6a 	bl	8001438 <_sbrk_r>
 8000b64:	4581      	cmp	r9, r0
 8000b66:	d142      	bne.n	8000bee <_malloc_r+0xea>
 8000b68:	6821      	ldr	r1, [r4, #0]
 8000b6a:	1a6d      	subs	r5, r5, r1
 8000b6c:	4629      	mov	r1, r5
 8000b6e:	4630      	mov	r0, r6
 8000b70:	f7ff ffa6 	bl	8000ac0 <sbrk_aligned>
 8000b74:	3001      	adds	r0, #1
 8000b76:	d03a      	beq.n	8000bee <_malloc_r+0xea>
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	442b      	add	r3, r5
 8000b7c:	6023      	str	r3, [r4, #0]
 8000b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	bb62      	cbnz	r2, 8000be0 <_malloc_r+0xdc>
 8000b86:	f8c8 7000 	str.w	r7, [r8]
 8000b8a:	e00f      	b.n	8000bac <_malloc_r+0xa8>
 8000b8c:	6822      	ldr	r2, [r4, #0]
 8000b8e:	1b52      	subs	r2, r2, r5
 8000b90:	d420      	bmi.n	8000bd4 <_malloc_r+0xd0>
 8000b92:	2a0b      	cmp	r2, #11
 8000b94:	d917      	bls.n	8000bc6 <_malloc_r+0xc2>
 8000b96:	1961      	adds	r1, r4, r5
 8000b98:	42a3      	cmp	r3, r4
 8000b9a:	6025      	str	r5, [r4, #0]
 8000b9c:	bf18      	it	ne
 8000b9e:	6059      	strne	r1, [r3, #4]
 8000ba0:	6863      	ldr	r3, [r4, #4]
 8000ba2:	bf08      	it	eq
 8000ba4:	f8c8 1000 	streq.w	r1, [r8]
 8000ba8:	5162      	str	r2, [r4, r5]
 8000baa:	604b      	str	r3, [r1, #4]
 8000bac:	4630      	mov	r0, r6
 8000bae:	f000 f82f 	bl	8000c10 <__malloc_unlock>
 8000bb2:	f104 000b 	add.w	r0, r4, #11
 8000bb6:	1d23      	adds	r3, r4, #4
 8000bb8:	f020 0007 	bic.w	r0, r0, #7
 8000bbc:	1ac2      	subs	r2, r0, r3
 8000bbe:	bf1c      	itt	ne
 8000bc0:	1a1b      	subne	r3, r3, r0
 8000bc2:	50a3      	strne	r3, [r4, r2]
 8000bc4:	e7af      	b.n	8000b26 <_malloc_r+0x22>
 8000bc6:	6862      	ldr	r2, [r4, #4]
 8000bc8:	42a3      	cmp	r3, r4
 8000bca:	bf0c      	ite	eq
 8000bcc:	f8c8 2000 	streq.w	r2, [r8]
 8000bd0:	605a      	strne	r2, [r3, #4]
 8000bd2:	e7eb      	b.n	8000bac <_malloc_r+0xa8>
 8000bd4:	4623      	mov	r3, r4
 8000bd6:	6864      	ldr	r4, [r4, #4]
 8000bd8:	e7ae      	b.n	8000b38 <_malloc_r+0x34>
 8000bda:	463c      	mov	r4, r7
 8000bdc:	687f      	ldr	r7, [r7, #4]
 8000bde:	e7b6      	b.n	8000b4e <_malloc_r+0x4a>
 8000be0:	461a      	mov	r2, r3
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	d1fb      	bne.n	8000be0 <_malloc_r+0xdc>
 8000be8:	2300      	movs	r3, #0
 8000bea:	6053      	str	r3, [r2, #4]
 8000bec:	e7de      	b.n	8000bac <_malloc_r+0xa8>
 8000bee:	230c      	movs	r3, #12
 8000bf0:	6033      	str	r3, [r6, #0]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	f000 f80c 	bl	8000c10 <__malloc_unlock>
 8000bf8:	e794      	b.n	8000b24 <_malloc_r+0x20>
 8000bfa:	6005      	str	r5, [r0, #0]
 8000bfc:	e7d6      	b.n	8000bac <_malloc_r+0xa8>
 8000bfe:	bf00      	nop
 8000c00:	200001c8 	.word	0x200001c8

08000c04 <__malloc_lock>:
 8000c04:	4801      	ldr	r0, [pc, #4]	@ (8000c0c <__malloc_lock+0x8>)
 8000c06:	f7ff bf0e 	b.w	8000a26 <__retarget_lock_acquire_recursive>
 8000c0a:	bf00      	nop
 8000c0c:	200001c0 	.word	0x200001c0

08000c10 <__malloc_unlock>:
 8000c10:	4801      	ldr	r0, [pc, #4]	@ (8000c18 <__malloc_unlock+0x8>)
 8000c12:	f7ff bf09 	b.w	8000a28 <__retarget_lock_release_recursive>
 8000c16:	bf00      	nop
 8000c18:	200001c0 	.word	0x200001c0

08000c1c <__sfputc_r>:
 8000c1c:	6893      	ldr	r3, [r2, #8]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	b410      	push	{r4}
 8000c24:	6093      	str	r3, [r2, #8]
 8000c26:	da08      	bge.n	8000c3a <__sfputc_r+0x1e>
 8000c28:	6994      	ldr	r4, [r2, #24]
 8000c2a:	42a3      	cmp	r3, r4
 8000c2c:	db01      	blt.n	8000c32 <__sfputc_r+0x16>
 8000c2e:	290a      	cmp	r1, #10
 8000c30:	d103      	bne.n	8000c3a <__sfputc_r+0x1e>
 8000c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c36:	f000 bb6b 	b.w	8001310 <__swbuf_r>
 8000c3a:	6813      	ldr	r3, [r2, #0]
 8000c3c:	1c58      	adds	r0, r3, #1
 8000c3e:	6010      	str	r0, [r2, #0]
 8000c40:	7019      	strb	r1, [r3, #0]
 8000c42:	4608      	mov	r0, r1
 8000c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <__sfputs_r>:
 8000c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	460f      	mov	r7, r1
 8000c50:	4614      	mov	r4, r2
 8000c52:	18d5      	adds	r5, r2, r3
 8000c54:	42ac      	cmp	r4, r5
 8000c56:	d101      	bne.n	8000c5c <__sfputs_r+0x12>
 8000c58:	2000      	movs	r0, #0
 8000c5a:	e007      	b.n	8000c6c <__sfputs_r+0x22>
 8000c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c60:	463a      	mov	r2, r7
 8000c62:	4630      	mov	r0, r6
 8000c64:	f7ff ffda 	bl	8000c1c <__sfputc_r>
 8000c68:	1c43      	adds	r3, r0, #1
 8000c6a:	d1f3      	bne.n	8000c54 <__sfputs_r+0xa>
 8000c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c70 <_vfiprintf_r>:
 8000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c74:	460d      	mov	r5, r1
 8000c76:	b09d      	sub	sp, #116	@ 0x74
 8000c78:	4614      	mov	r4, r2
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	b118      	cbz	r0, 8000c88 <_vfiprintf_r+0x18>
 8000c80:	6a03      	ldr	r3, [r0, #32]
 8000c82:	b90b      	cbnz	r3, 8000c88 <_vfiprintf_r+0x18>
 8000c84:	f7ff fdca 	bl	800081c <__sinit>
 8000c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c8a:	07d9      	lsls	r1, r3, #31
 8000c8c:	d405      	bmi.n	8000c9a <_vfiprintf_r+0x2a>
 8000c8e:	89ab      	ldrh	r3, [r5, #12]
 8000c90:	059a      	lsls	r2, r3, #22
 8000c92:	d402      	bmi.n	8000c9a <_vfiprintf_r+0x2a>
 8000c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c96:	f7ff fec6 	bl	8000a26 <__retarget_lock_acquire_recursive>
 8000c9a:	89ab      	ldrh	r3, [r5, #12]
 8000c9c:	071b      	lsls	r3, r3, #28
 8000c9e:	d501      	bpl.n	8000ca4 <_vfiprintf_r+0x34>
 8000ca0:	692b      	ldr	r3, [r5, #16]
 8000ca2:	b99b      	cbnz	r3, 8000ccc <_vfiprintf_r+0x5c>
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	f000 fb70 	bl	800138c <__swsetup_r>
 8000cac:	b170      	cbz	r0, 8000ccc <_vfiprintf_r+0x5c>
 8000cae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cb0:	07dc      	lsls	r4, r3, #31
 8000cb2:	d504      	bpl.n	8000cbe <_vfiprintf_r+0x4e>
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb8:	b01d      	add	sp, #116	@ 0x74
 8000cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cbe:	89ab      	ldrh	r3, [r5, #12]
 8000cc0:	0598      	lsls	r0, r3, #22
 8000cc2:	d4f7      	bmi.n	8000cb4 <_vfiprintf_r+0x44>
 8000cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cc6:	f7ff feaf 	bl	8000a28 <__retarget_lock_release_recursive>
 8000cca:	e7f3      	b.n	8000cb4 <_vfiprintf_r+0x44>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cda:	2330      	movs	r3, #48	@ 0x30
 8000cdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e8c <_vfiprintf_r+0x21c>
 8000ce0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ce4:	f04f 0901 	mov.w	r9, #1
 8000ce8:	4623      	mov	r3, r4
 8000cea:	469a      	mov	sl, r3
 8000cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cf0:	b10a      	cbz	r2, 8000cf6 <_vfiprintf_r+0x86>
 8000cf2:	2a25      	cmp	r2, #37	@ 0x25
 8000cf4:	d1f9      	bne.n	8000cea <_vfiprintf_r+0x7a>
 8000cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8000cfa:	d00b      	beq.n	8000d14 <_vfiprintf_r+0xa4>
 8000cfc:	465b      	mov	r3, fp
 8000cfe:	4622      	mov	r2, r4
 8000d00:	4629      	mov	r1, r5
 8000d02:	4630      	mov	r0, r6
 8000d04:	f7ff ffa1 	bl	8000c4a <__sfputs_r>
 8000d08:	3001      	adds	r0, #1
 8000d0a:	f000 80a7 	beq.w	8000e5c <_vfiprintf_r+0x1ec>
 8000d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d10:	445a      	add	r2, fp
 8000d12:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d14:	f89a 3000 	ldrb.w	r3, [sl]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 809f 	beq.w	8000e5c <_vfiprintf_r+0x1ec>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d28:	f10a 0a01 	add.w	sl, sl, #1
 8000d2c:	9304      	str	r3, [sp, #16]
 8000d2e:	9307      	str	r3, [sp, #28]
 8000d30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d34:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d36:	4654      	mov	r4, sl
 8000d38:	2205      	movs	r2, #5
 8000d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d3e:	4853      	ldr	r0, [pc, #332]	@ (8000e8c <_vfiprintf_r+0x21c>)
 8000d40:	f7ff fa4e 	bl	80001e0 <memchr>
 8000d44:	9a04      	ldr	r2, [sp, #16]
 8000d46:	b9d8      	cbnz	r0, 8000d80 <_vfiprintf_r+0x110>
 8000d48:	06d1      	lsls	r1, r2, #27
 8000d4a:	bf44      	itt	mi
 8000d4c:	2320      	movmi	r3, #32
 8000d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d52:	0713      	lsls	r3, r2, #28
 8000d54:	bf44      	itt	mi
 8000d56:	232b      	movmi	r3, #43	@ 0x2b
 8000d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d62:	d015      	beq.n	8000d90 <_vfiprintf_r+0x120>
 8000d64:	9a07      	ldr	r2, [sp, #28]
 8000d66:	4654      	mov	r4, sl
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f04f 0c0a 	mov.w	ip, #10
 8000d6e:	4621      	mov	r1, r4
 8000d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d74:	3b30      	subs	r3, #48	@ 0x30
 8000d76:	2b09      	cmp	r3, #9
 8000d78:	d94b      	bls.n	8000e12 <_vfiprintf_r+0x1a2>
 8000d7a:	b1b0      	cbz	r0, 8000daa <_vfiprintf_r+0x13a>
 8000d7c:	9207      	str	r2, [sp, #28]
 8000d7e:	e014      	b.n	8000daa <_vfiprintf_r+0x13a>
 8000d80:	eba0 0308 	sub.w	r3, r0, r8
 8000d84:	fa09 f303 	lsl.w	r3, r9, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	9304      	str	r3, [sp, #16]
 8000d8c:	46a2      	mov	sl, r4
 8000d8e:	e7d2      	b.n	8000d36 <_vfiprintf_r+0xc6>
 8000d90:	9b03      	ldr	r3, [sp, #12]
 8000d92:	1d19      	adds	r1, r3, #4
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	9103      	str	r1, [sp, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bfbb      	ittet	lt
 8000d9c:	425b      	neglt	r3, r3
 8000d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8000da2:	9307      	strge	r3, [sp, #28]
 8000da4:	9307      	strlt	r3, [sp, #28]
 8000da6:	bfb8      	it	lt
 8000da8:	9204      	strlt	r2, [sp, #16]
 8000daa:	7823      	ldrb	r3, [r4, #0]
 8000dac:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dae:	d10a      	bne.n	8000dc6 <_vfiprintf_r+0x156>
 8000db0:	7863      	ldrb	r3, [r4, #1]
 8000db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000db4:	d132      	bne.n	8000e1c <_vfiprintf_r+0x1ac>
 8000db6:	9b03      	ldr	r3, [sp, #12]
 8000db8:	1d1a      	adds	r2, r3, #4
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	9203      	str	r2, [sp, #12]
 8000dbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dc2:	3402      	adds	r4, #2
 8000dc4:	9305      	str	r3, [sp, #20]
 8000dc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e9c <_vfiprintf_r+0x22c>
 8000dca:	7821      	ldrb	r1, [r4, #0]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4650      	mov	r0, sl
 8000dd0:	f7ff fa06 	bl	80001e0 <memchr>
 8000dd4:	b138      	cbz	r0, 8000de6 <_vfiprintf_r+0x176>
 8000dd6:	9b04      	ldr	r3, [sp, #16]
 8000dd8:	eba0 000a 	sub.w	r0, r0, sl
 8000ddc:	2240      	movs	r2, #64	@ 0x40
 8000dde:	4082      	lsls	r2, r0
 8000de0:	4313      	orrs	r3, r2
 8000de2:	3401      	adds	r4, #1
 8000de4:	9304      	str	r3, [sp, #16]
 8000de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dea:	4829      	ldr	r0, [pc, #164]	@ (8000e90 <_vfiprintf_r+0x220>)
 8000dec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000df0:	2206      	movs	r2, #6
 8000df2:	f7ff f9f5 	bl	80001e0 <memchr>
 8000df6:	2800      	cmp	r0, #0
 8000df8:	d03f      	beq.n	8000e7a <_vfiprintf_r+0x20a>
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <_vfiprintf_r+0x224>)
 8000dfc:	bb1b      	cbnz	r3, 8000e46 <_vfiprintf_r+0x1d6>
 8000dfe:	9b03      	ldr	r3, [sp, #12]
 8000e00:	3307      	adds	r3, #7
 8000e02:	f023 0307 	bic.w	r3, r3, #7
 8000e06:	3308      	adds	r3, #8
 8000e08:	9303      	str	r3, [sp, #12]
 8000e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e0c:	443b      	add	r3, r7
 8000e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e10:	e76a      	b.n	8000ce8 <_vfiprintf_r+0x78>
 8000e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e16:	460c      	mov	r4, r1
 8000e18:	2001      	movs	r0, #1
 8000e1a:	e7a8      	b.n	8000d6e <_vfiprintf_r+0xfe>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	3401      	adds	r4, #1
 8000e20:	9305      	str	r3, [sp, #20]
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 0c0a 	mov.w	ip, #10
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e2e:	3a30      	subs	r2, #48	@ 0x30
 8000e30:	2a09      	cmp	r2, #9
 8000e32:	d903      	bls.n	8000e3c <_vfiprintf_r+0x1cc>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0c6      	beq.n	8000dc6 <_vfiprintf_r+0x156>
 8000e38:	9105      	str	r1, [sp, #20]
 8000e3a:	e7c4      	b.n	8000dc6 <_vfiprintf_r+0x156>
 8000e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e40:	4604      	mov	r4, r0
 8000e42:	2301      	movs	r3, #1
 8000e44:	e7f0      	b.n	8000e28 <_vfiprintf_r+0x1b8>
 8000e46:	ab03      	add	r3, sp, #12
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	462a      	mov	r2, r5
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <_vfiprintf_r+0x228>)
 8000e4e:	a904      	add	r1, sp, #16
 8000e50:	4630      	mov	r0, r6
 8000e52:	f3af 8000 	nop.w
 8000e56:	4607      	mov	r7, r0
 8000e58:	1c78      	adds	r0, r7, #1
 8000e5a:	d1d6      	bne.n	8000e0a <_vfiprintf_r+0x19a>
 8000e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e5e:	07d9      	lsls	r1, r3, #31
 8000e60:	d405      	bmi.n	8000e6e <_vfiprintf_r+0x1fe>
 8000e62:	89ab      	ldrh	r3, [r5, #12]
 8000e64:	059a      	lsls	r2, r3, #22
 8000e66:	d402      	bmi.n	8000e6e <_vfiprintf_r+0x1fe>
 8000e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e6a:	f7ff fddd 	bl	8000a28 <__retarget_lock_release_recursive>
 8000e6e:	89ab      	ldrh	r3, [r5, #12]
 8000e70:	065b      	lsls	r3, r3, #25
 8000e72:	f53f af1f 	bmi.w	8000cb4 <_vfiprintf_r+0x44>
 8000e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e78:	e71e      	b.n	8000cb8 <_vfiprintf_r+0x48>
 8000e7a:	ab03      	add	r3, sp, #12
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	462a      	mov	r2, r5
 8000e80:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <_vfiprintf_r+0x228>)
 8000e82:	a904      	add	r1, sp, #16
 8000e84:	4630      	mov	r0, r6
 8000e86:	f000 f879 	bl	8000f7c <_printf_i>
 8000e8a:	e7e4      	b.n	8000e56 <_vfiprintf_r+0x1e6>
 8000e8c:	08001584 	.word	0x08001584
 8000e90:	0800158e 	.word	0x0800158e
 8000e94:	00000000 	.word	0x00000000
 8000e98:	08000c4b 	.word	0x08000c4b
 8000e9c:	0800158a 	.word	0x0800158a

08000ea0 <_printf_common>:
 8000ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea4:	4616      	mov	r6, r2
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	688a      	ldr	r2, [r1, #8]
 8000eaa:	690b      	ldr	r3, [r1, #16]
 8000eac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	bfb8      	it	lt
 8000eb4:	4613      	movlt	r3, r2
 8000eb6:	6033      	str	r3, [r6, #0]
 8000eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ebc:	4607      	mov	r7, r0
 8000ebe:	460c      	mov	r4, r1
 8000ec0:	b10a      	cbz	r2, 8000ec6 <_printf_common+0x26>
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	6033      	str	r3, [r6, #0]
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	0699      	lsls	r1, r3, #26
 8000eca:	bf42      	ittt	mi
 8000ecc:	6833      	ldrmi	r3, [r6, #0]
 8000ece:	3302      	addmi	r3, #2
 8000ed0:	6033      	strmi	r3, [r6, #0]
 8000ed2:	6825      	ldr	r5, [r4, #0]
 8000ed4:	f015 0506 	ands.w	r5, r5, #6
 8000ed8:	d106      	bne.n	8000ee8 <_printf_common+0x48>
 8000eda:	f104 0a19 	add.w	sl, r4, #25
 8000ede:	68e3      	ldr	r3, [r4, #12]
 8000ee0:	6832      	ldr	r2, [r6, #0]
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	42ab      	cmp	r3, r5
 8000ee6:	dc26      	bgt.n	8000f36 <_printf_common+0x96>
 8000ee8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000eec:	6822      	ldr	r2, [r4, #0]
 8000eee:	3b00      	subs	r3, #0
 8000ef0:	bf18      	it	ne
 8000ef2:	2301      	movne	r3, #1
 8000ef4:	0692      	lsls	r2, r2, #26
 8000ef6:	d42b      	bmi.n	8000f50 <_printf_common+0xb0>
 8000ef8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000efc:	4641      	mov	r1, r8
 8000efe:	4638      	mov	r0, r7
 8000f00:	47c8      	blx	r9
 8000f02:	3001      	adds	r0, #1
 8000f04:	d01e      	beq.n	8000f44 <_printf_common+0xa4>
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	6922      	ldr	r2, [r4, #16]
 8000f0a:	f003 0306 	and.w	r3, r3, #6
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf02      	ittt	eq
 8000f12:	68e5      	ldreq	r5, [r4, #12]
 8000f14:	6833      	ldreq	r3, [r6, #0]
 8000f16:	1aed      	subeq	r5, r5, r3
 8000f18:	68a3      	ldr	r3, [r4, #8]
 8000f1a:	bf0c      	ite	eq
 8000f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f20:	2500      	movne	r5, #0
 8000f22:	4293      	cmp	r3, r2
 8000f24:	bfc4      	itt	gt
 8000f26:	1a9b      	subgt	r3, r3, r2
 8000f28:	18ed      	addgt	r5, r5, r3
 8000f2a:	2600      	movs	r6, #0
 8000f2c:	341a      	adds	r4, #26
 8000f2e:	42b5      	cmp	r5, r6
 8000f30:	d11a      	bne.n	8000f68 <_printf_common+0xc8>
 8000f32:	2000      	movs	r0, #0
 8000f34:	e008      	b.n	8000f48 <_printf_common+0xa8>
 8000f36:	2301      	movs	r3, #1
 8000f38:	4652      	mov	r2, sl
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	47c8      	blx	r9
 8000f40:	3001      	adds	r0, #1
 8000f42:	d103      	bne.n	8000f4c <_printf_common+0xac>
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4c:	3501      	adds	r5, #1
 8000f4e:	e7c6      	b.n	8000ede <_printf_common+0x3e>
 8000f50:	18e1      	adds	r1, r4, r3
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	2030      	movs	r0, #48	@ 0x30
 8000f56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f5a:	4422      	add	r2, r4
 8000f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f64:	3302      	adds	r3, #2
 8000f66:	e7c7      	b.n	8000ef8 <_printf_common+0x58>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	4622      	mov	r2, r4
 8000f6c:	4641      	mov	r1, r8
 8000f6e:	4638      	mov	r0, r7
 8000f70:	47c8      	blx	r9
 8000f72:	3001      	adds	r0, #1
 8000f74:	d0e6      	beq.n	8000f44 <_printf_common+0xa4>
 8000f76:	3601      	adds	r6, #1
 8000f78:	e7d9      	b.n	8000f2e <_printf_common+0x8e>
	...

08000f7c <_printf_i>:
 8000f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f80:	7e0f      	ldrb	r7, [r1, #24]
 8000f82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f84:	2f78      	cmp	r7, #120	@ 0x78
 8000f86:	4691      	mov	r9, r2
 8000f88:	4680      	mov	r8, r0
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	469a      	mov	sl, r3
 8000f8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f92:	d807      	bhi.n	8000fa4 <_printf_i+0x28>
 8000f94:	2f62      	cmp	r7, #98	@ 0x62
 8000f96:	d80a      	bhi.n	8000fae <_printf_i+0x32>
 8000f98:	2f00      	cmp	r7, #0
 8000f9a:	f000 80d1 	beq.w	8001140 <_printf_i+0x1c4>
 8000f9e:	2f58      	cmp	r7, #88	@ 0x58
 8000fa0:	f000 80b8 	beq.w	8001114 <_printf_i+0x198>
 8000fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fac:	e03a      	b.n	8001024 <_printf_i+0xa8>
 8000fae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fb2:	2b15      	cmp	r3, #21
 8000fb4:	d8f6      	bhi.n	8000fa4 <_printf_i+0x28>
 8000fb6:	a101      	add	r1, pc, #4	@ (adr r1, 8000fbc <_printf_i+0x40>)
 8000fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fbc:	08001015 	.word	0x08001015
 8000fc0:	08001029 	.word	0x08001029
 8000fc4:	08000fa5 	.word	0x08000fa5
 8000fc8:	08000fa5 	.word	0x08000fa5
 8000fcc:	08000fa5 	.word	0x08000fa5
 8000fd0:	08000fa5 	.word	0x08000fa5
 8000fd4:	08001029 	.word	0x08001029
 8000fd8:	08000fa5 	.word	0x08000fa5
 8000fdc:	08000fa5 	.word	0x08000fa5
 8000fe0:	08000fa5 	.word	0x08000fa5
 8000fe4:	08000fa5 	.word	0x08000fa5
 8000fe8:	08001127 	.word	0x08001127
 8000fec:	08001053 	.word	0x08001053
 8000ff0:	080010e1 	.word	0x080010e1
 8000ff4:	08000fa5 	.word	0x08000fa5
 8000ff8:	08000fa5 	.word	0x08000fa5
 8000ffc:	08001149 	.word	0x08001149
 8001000:	08000fa5 	.word	0x08000fa5
 8001004:	08001053 	.word	0x08001053
 8001008:	08000fa5 	.word	0x08000fa5
 800100c:	08000fa5 	.word	0x08000fa5
 8001010:	080010e9 	.word	0x080010e9
 8001014:	6833      	ldr	r3, [r6, #0]
 8001016:	1d1a      	adds	r2, r3, #4
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6032      	str	r2, [r6, #0]
 800101c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001024:	2301      	movs	r3, #1
 8001026:	e09c      	b.n	8001162 <_printf_i+0x1e6>
 8001028:	6833      	ldr	r3, [r6, #0]
 800102a:	6820      	ldr	r0, [r4, #0]
 800102c:	1d19      	adds	r1, r3, #4
 800102e:	6031      	str	r1, [r6, #0]
 8001030:	0606      	lsls	r6, r0, #24
 8001032:	d501      	bpl.n	8001038 <_printf_i+0xbc>
 8001034:	681d      	ldr	r5, [r3, #0]
 8001036:	e003      	b.n	8001040 <_printf_i+0xc4>
 8001038:	0645      	lsls	r5, r0, #25
 800103a:	d5fb      	bpl.n	8001034 <_printf_i+0xb8>
 800103c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001040:	2d00      	cmp	r5, #0
 8001042:	da03      	bge.n	800104c <_printf_i+0xd0>
 8001044:	232d      	movs	r3, #45	@ 0x2d
 8001046:	426d      	negs	r5, r5
 8001048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800104c:	4858      	ldr	r0, [pc, #352]	@ (80011b0 <_printf_i+0x234>)
 800104e:	230a      	movs	r3, #10
 8001050:	e011      	b.n	8001076 <_printf_i+0xfa>
 8001052:	6821      	ldr	r1, [r4, #0]
 8001054:	6833      	ldr	r3, [r6, #0]
 8001056:	0608      	lsls	r0, r1, #24
 8001058:	f853 5b04 	ldr.w	r5, [r3], #4
 800105c:	d402      	bmi.n	8001064 <_printf_i+0xe8>
 800105e:	0649      	lsls	r1, r1, #25
 8001060:	bf48      	it	mi
 8001062:	b2ad      	uxthmi	r5, r5
 8001064:	2f6f      	cmp	r7, #111	@ 0x6f
 8001066:	4852      	ldr	r0, [pc, #328]	@ (80011b0 <_printf_i+0x234>)
 8001068:	6033      	str	r3, [r6, #0]
 800106a:	bf14      	ite	ne
 800106c:	230a      	movne	r3, #10
 800106e:	2308      	moveq	r3, #8
 8001070:	2100      	movs	r1, #0
 8001072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001076:	6866      	ldr	r6, [r4, #4]
 8001078:	60a6      	str	r6, [r4, #8]
 800107a:	2e00      	cmp	r6, #0
 800107c:	db05      	blt.n	800108a <_printf_i+0x10e>
 800107e:	6821      	ldr	r1, [r4, #0]
 8001080:	432e      	orrs	r6, r5
 8001082:	f021 0104 	bic.w	r1, r1, #4
 8001086:	6021      	str	r1, [r4, #0]
 8001088:	d04b      	beq.n	8001122 <_printf_i+0x1a6>
 800108a:	4616      	mov	r6, r2
 800108c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001090:	fb03 5711 	mls	r7, r3, r1, r5
 8001094:	5dc7      	ldrb	r7, [r0, r7]
 8001096:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800109a:	462f      	mov	r7, r5
 800109c:	42bb      	cmp	r3, r7
 800109e:	460d      	mov	r5, r1
 80010a0:	d9f4      	bls.n	800108c <_printf_i+0x110>
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d10b      	bne.n	80010be <_printf_i+0x142>
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	07df      	lsls	r7, r3, #31
 80010aa:	d508      	bpl.n	80010be <_printf_i+0x142>
 80010ac:	6923      	ldr	r3, [r4, #16]
 80010ae:	6861      	ldr	r1, [r4, #4]
 80010b0:	4299      	cmp	r1, r3
 80010b2:	bfde      	ittt	le
 80010b4:	2330      	movle	r3, #48	@ 0x30
 80010b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010ba:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80010be:	1b92      	subs	r2, r2, r6
 80010c0:	6122      	str	r2, [r4, #16]
 80010c2:	f8cd a000 	str.w	sl, [sp]
 80010c6:	464b      	mov	r3, r9
 80010c8:	aa03      	add	r2, sp, #12
 80010ca:	4621      	mov	r1, r4
 80010cc:	4640      	mov	r0, r8
 80010ce:	f7ff fee7 	bl	8000ea0 <_printf_common>
 80010d2:	3001      	adds	r0, #1
 80010d4:	d14a      	bne.n	800116c <_printf_i+0x1f0>
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010da:	b004      	add	sp, #16
 80010dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	6023      	str	r3, [r4, #0]
 80010e8:	4832      	ldr	r0, [pc, #200]	@ (80011b4 <_printf_i+0x238>)
 80010ea:	2778      	movs	r7, #120	@ 0x78
 80010ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	6831      	ldr	r1, [r6, #0]
 80010f4:	061f      	lsls	r7, r3, #24
 80010f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80010fa:	d402      	bmi.n	8001102 <_printf_i+0x186>
 80010fc:	065f      	lsls	r7, r3, #25
 80010fe:	bf48      	it	mi
 8001100:	b2ad      	uxthmi	r5, r5
 8001102:	6031      	str	r1, [r6, #0]
 8001104:	07d9      	lsls	r1, r3, #31
 8001106:	bf44      	itt	mi
 8001108:	f043 0320 	orrmi.w	r3, r3, #32
 800110c:	6023      	strmi	r3, [r4, #0]
 800110e:	b11d      	cbz	r5, 8001118 <_printf_i+0x19c>
 8001110:	2310      	movs	r3, #16
 8001112:	e7ad      	b.n	8001070 <_printf_i+0xf4>
 8001114:	4826      	ldr	r0, [pc, #152]	@ (80011b0 <_printf_i+0x234>)
 8001116:	e7e9      	b.n	80010ec <_printf_i+0x170>
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	f023 0320 	bic.w	r3, r3, #32
 800111e:	6023      	str	r3, [r4, #0]
 8001120:	e7f6      	b.n	8001110 <_printf_i+0x194>
 8001122:	4616      	mov	r6, r2
 8001124:	e7bd      	b.n	80010a2 <_printf_i+0x126>
 8001126:	6833      	ldr	r3, [r6, #0]
 8001128:	6825      	ldr	r5, [r4, #0]
 800112a:	6961      	ldr	r1, [r4, #20]
 800112c:	1d18      	adds	r0, r3, #4
 800112e:	6030      	str	r0, [r6, #0]
 8001130:	062e      	lsls	r6, r5, #24
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	d501      	bpl.n	800113a <_printf_i+0x1be>
 8001136:	6019      	str	r1, [r3, #0]
 8001138:	e002      	b.n	8001140 <_printf_i+0x1c4>
 800113a:	0668      	lsls	r0, r5, #25
 800113c:	d5fb      	bpl.n	8001136 <_printf_i+0x1ba>
 800113e:	8019      	strh	r1, [r3, #0]
 8001140:	2300      	movs	r3, #0
 8001142:	6123      	str	r3, [r4, #16]
 8001144:	4616      	mov	r6, r2
 8001146:	e7bc      	b.n	80010c2 <_printf_i+0x146>
 8001148:	6833      	ldr	r3, [r6, #0]
 800114a:	1d1a      	adds	r2, r3, #4
 800114c:	6032      	str	r2, [r6, #0]
 800114e:	681e      	ldr	r6, [r3, #0]
 8001150:	6862      	ldr	r2, [r4, #4]
 8001152:	2100      	movs	r1, #0
 8001154:	4630      	mov	r0, r6
 8001156:	f7ff f843 	bl	80001e0 <memchr>
 800115a:	b108      	cbz	r0, 8001160 <_printf_i+0x1e4>
 800115c:	1b80      	subs	r0, r0, r6
 800115e:	6060      	str	r0, [r4, #4]
 8001160:	6863      	ldr	r3, [r4, #4]
 8001162:	6123      	str	r3, [r4, #16]
 8001164:	2300      	movs	r3, #0
 8001166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800116a:	e7aa      	b.n	80010c2 <_printf_i+0x146>
 800116c:	6923      	ldr	r3, [r4, #16]
 800116e:	4632      	mov	r2, r6
 8001170:	4649      	mov	r1, r9
 8001172:	4640      	mov	r0, r8
 8001174:	47d0      	blx	sl
 8001176:	3001      	adds	r0, #1
 8001178:	d0ad      	beq.n	80010d6 <_printf_i+0x15a>
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	079b      	lsls	r3, r3, #30
 800117e:	d413      	bmi.n	80011a8 <_printf_i+0x22c>
 8001180:	68e0      	ldr	r0, [r4, #12]
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	4298      	cmp	r0, r3
 8001186:	bfb8      	it	lt
 8001188:	4618      	movlt	r0, r3
 800118a:	e7a6      	b.n	80010da <_printf_i+0x15e>
 800118c:	2301      	movs	r3, #1
 800118e:	4632      	mov	r2, r6
 8001190:	4649      	mov	r1, r9
 8001192:	4640      	mov	r0, r8
 8001194:	47d0      	blx	sl
 8001196:	3001      	adds	r0, #1
 8001198:	d09d      	beq.n	80010d6 <_printf_i+0x15a>
 800119a:	3501      	adds	r5, #1
 800119c:	68e3      	ldr	r3, [r4, #12]
 800119e:	9903      	ldr	r1, [sp, #12]
 80011a0:	1a5b      	subs	r3, r3, r1
 80011a2:	42ab      	cmp	r3, r5
 80011a4:	dcf2      	bgt.n	800118c <_printf_i+0x210>
 80011a6:	e7eb      	b.n	8001180 <_printf_i+0x204>
 80011a8:	2500      	movs	r5, #0
 80011aa:	f104 0619 	add.w	r6, r4, #25
 80011ae:	e7f5      	b.n	800119c <_printf_i+0x220>
 80011b0:	08001595 	.word	0x08001595
 80011b4:	080015a6 	.word	0x080015a6

080011b8 <__sflush_r>:
 80011b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c0:	0716      	lsls	r6, r2, #28
 80011c2:	4605      	mov	r5, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	d454      	bmi.n	8001272 <__sflush_r+0xba>
 80011c8:	684b      	ldr	r3, [r1, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc02      	bgt.n	80011d4 <__sflush_r+0x1c>
 80011ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	dd48      	ble.n	8001266 <__sflush_r+0xae>
 80011d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011d6:	2e00      	cmp	r6, #0
 80011d8:	d045      	beq.n	8001266 <__sflush_r+0xae>
 80011da:	2300      	movs	r3, #0
 80011dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011e0:	682f      	ldr	r7, [r5, #0]
 80011e2:	6a21      	ldr	r1, [r4, #32]
 80011e4:	602b      	str	r3, [r5, #0]
 80011e6:	d030      	beq.n	800124a <__sflush_r+0x92>
 80011e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	0759      	lsls	r1, r3, #29
 80011ee:	d505      	bpl.n	80011fc <__sflush_r+0x44>
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	1ad2      	subs	r2, r2, r3
 80011f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011f6:	b10b      	cbz	r3, 80011fc <__sflush_r+0x44>
 80011f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	2300      	movs	r3, #0
 80011fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001200:	6a21      	ldr	r1, [r4, #32]
 8001202:	4628      	mov	r0, r5
 8001204:	47b0      	blx	r6
 8001206:	1c43      	adds	r3, r0, #1
 8001208:	89a3      	ldrh	r3, [r4, #12]
 800120a:	d106      	bne.n	800121a <__sflush_r+0x62>
 800120c:	6829      	ldr	r1, [r5, #0]
 800120e:	291d      	cmp	r1, #29
 8001210:	d82b      	bhi.n	800126a <__sflush_r+0xb2>
 8001212:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <__sflush_r+0x104>)
 8001214:	40ca      	lsrs	r2, r1
 8001216:	07d6      	lsls	r6, r2, #31
 8001218:	d527      	bpl.n	800126a <__sflush_r+0xb2>
 800121a:	2200      	movs	r2, #0
 800121c:	6062      	str	r2, [r4, #4]
 800121e:	04d9      	lsls	r1, r3, #19
 8001220:	6922      	ldr	r2, [r4, #16]
 8001222:	6022      	str	r2, [r4, #0]
 8001224:	d504      	bpl.n	8001230 <__sflush_r+0x78>
 8001226:	1c42      	adds	r2, r0, #1
 8001228:	d101      	bne.n	800122e <__sflush_r+0x76>
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	b903      	cbnz	r3, 8001230 <__sflush_r+0x78>
 800122e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001232:	602f      	str	r7, [r5, #0]
 8001234:	b1b9      	cbz	r1, 8001266 <__sflush_r+0xae>
 8001236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800123a:	4299      	cmp	r1, r3
 800123c:	d002      	beq.n	8001244 <__sflush_r+0x8c>
 800123e:	4628      	mov	r0, r5
 8001240:	f7ff fbf4 	bl	8000a2c <_free_r>
 8001244:	2300      	movs	r3, #0
 8001246:	6363      	str	r3, [r4, #52]	@ 0x34
 8001248:	e00d      	b.n	8001266 <__sflush_r+0xae>
 800124a:	2301      	movs	r3, #1
 800124c:	4628      	mov	r0, r5
 800124e:	47b0      	blx	r6
 8001250:	4602      	mov	r2, r0
 8001252:	1c50      	adds	r0, r2, #1
 8001254:	d1c9      	bne.n	80011ea <__sflush_r+0x32>
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0c6      	beq.n	80011ea <__sflush_r+0x32>
 800125c:	2b1d      	cmp	r3, #29
 800125e:	d001      	beq.n	8001264 <__sflush_r+0xac>
 8001260:	2b16      	cmp	r3, #22
 8001262:	d11e      	bne.n	80012a2 <__sflush_r+0xea>
 8001264:	602f      	str	r7, [r5, #0]
 8001266:	2000      	movs	r0, #0
 8001268:	e022      	b.n	80012b0 <__sflush_r+0xf8>
 800126a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800126e:	b21b      	sxth	r3, r3
 8001270:	e01b      	b.n	80012aa <__sflush_r+0xf2>
 8001272:	690f      	ldr	r7, [r1, #16]
 8001274:	2f00      	cmp	r7, #0
 8001276:	d0f6      	beq.n	8001266 <__sflush_r+0xae>
 8001278:	0793      	lsls	r3, r2, #30
 800127a:	680e      	ldr	r6, [r1, #0]
 800127c:	bf08      	it	eq
 800127e:	694b      	ldreq	r3, [r1, #20]
 8001280:	600f      	str	r7, [r1, #0]
 8001282:	bf18      	it	ne
 8001284:	2300      	movne	r3, #0
 8001286:	eba6 0807 	sub.w	r8, r6, r7
 800128a:	608b      	str	r3, [r1, #8]
 800128c:	f1b8 0f00 	cmp.w	r8, #0
 8001290:	dde9      	ble.n	8001266 <__sflush_r+0xae>
 8001292:	6a21      	ldr	r1, [r4, #32]
 8001294:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001296:	4643      	mov	r3, r8
 8001298:	463a      	mov	r2, r7
 800129a:	4628      	mov	r0, r5
 800129c:	47b0      	blx	r6
 800129e:	2800      	cmp	r0, #0
 80012a0:	dc08      	bgt.n	80012b4 <__sflush_r+0xfc>
 80012a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012aa:	81a3      	strh	r3, [r4, #12]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b4:	4407      	add	r7, r0
 80012b6:	eba8 0800 	sub.w	r8, r8, r0
 80012ba:	e7e7      	b.n	800128c <__sflush_r+0xd4>
 80012bc:	20400001 	.word	0x20400001

080012c0 <_fflush_r>:
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	690b      	ldr	r3, [r1, #16]
 80012c4:	4605      	mov	r5, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	b913      	cbnz	r3, 80012d0 <_fflush_r+0x10>
 80012ca:	2500      	movs	r5, #0
 80012cc:	4628      	mov	r0, r5
 80012ce:	bd38      	pop	{r3, r4, r5, pc}
 80012d0:	b118      	cbz	r0, 80012da <_fflush_r+0x1a>
 80012d2:	6a03      	ldr	r3, [r0, #32]
 80012d4:	b90b      	cbnz	r3, 80012da <_fflush_r+0x1a>
 80012d6:	f7ff faa1 	bl	800081c <__sinit>
 80012da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f3      	beq.n	80012ca <_fflush_r+0xa>
 80012e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012e4:	07d0      	lsls	r0, r2, #31
 80012e6:	d404      	bmi.n	80012f2 <_fflush_r+0x32>
 80012e8:	0599      	lsls	r1, r3, #22
 80012ea:	d402      	bmi.n	80012f2 <_fflush_r+0x32>
 80012ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012ee:	f7ff fb9a 	bl	8000a26 <__retarget_lock_acquire_recursive>
 80012f2:	4628      	mov	r0, r5
 80012f4:	4621      	mov	r1, r4
 80012f6:	f7ff ff5f 	bl	80011b8 <__sflush_r>
 80012fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012fc:	07da      	lsls	r2, r3, #31
 80012fe:	4605      	mov	r5, r0
 8001300:	d4e4      	bmi.n	80012cc <_fflush_r+0xc>
 8001302:	89a3      	ldrh	r3, [r4, #12]
 8001304:	059b      	lsls	r3, r3, #22
 8001306:	d4e1      	bmi.n	80012cc <_fflush_r+0xc>
 8001308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800130a:	f7ff fb8d 	bl	8000a28 <__retarget_lock_release_recursive>
 800130e:	e7dd      	b.n	80012cc <_fflush_r+0xc>

08001310 <__swbuf_r>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	460e      	mov	r6, r1
 8001314:	4614      	mov	r4, r2
 8001316:	4605      	mov	r5, r0
 8001318:	b118      	cbz	r0, 8001322 <__swbuf_r+0x12>
 800131a:	6a03      	ldr	r3, [r0, #32]
 800131c:	b90b      	cbnz	r3, 8001322 <__swbuf_r+0x12>
 800131e:	f7ff fa7d 	bl	800081c <__sinit>
 8001322:	69a3      	ldr	r3, [r4, #24]
 8001324:	60a3      	str	r3, [r4, #8]
 8001326:	89a3      	ldrh	r3, [r4, #12]
 8001328:	071a      	lsls	r2, r3, #28
 800132a:	d501      	bpl.n	8001330 <__swbuf_r+0x20>
 800132c:	6923      	ldr	r3, [r4, #16]
 800132e:	b943      	cbnz	r3, 8001342 <__swbuf_r+0x32>
 8001330:	4621      	mov	r1, r4
 8001332:	4628      	mov	r0, r5
 8001334:	f000 f82a 	bl	800138c <__swsetup_r>
 8001338:	b118      	cbz	r0, 8001342 <__swbuf_r+0x32>
 800133a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800133e:	4638      	mov	r0, r7
 8001340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	6922      	ldr	r2, [r4, #16]
 8001346:	1a98      	subs	r0, r3, r2
 8001348:	6963      	ldr	r3, [r4, #20]
 800134a:	b2f6      	uxtb	r6, r6
 800134c:	4283      	cmp	r3, r0
 800134e:	4637      	mov	r7, r6
 8001350:	dc05      	bgt.n	800135e <__swbuf_r+0x4e>
 8001352:	4621      	mov	r1, r4
 8001354:	4628      	mov	r0, r5
 8001356:	f7ff ffb3 	bl	80012c0 <_fflush_r>
 800135a:	2800      	cmp	r0, #0
 800135c:	d1ed      	bne.n	800133a <__swbuf_r+0x2a>
 800135e:	68a3      	ldr	r3, [r4, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	60a3      	str	r3, [r4, #8]
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	6022      	str	r2, [r4, #0]
 800136a:	701e      	strb	r6, [r3, #0]
 800136c:	6962      	ldr	r2, [r4, #20]
 800136e:	1c43      	adds	r3, r0, #1
 8001370:	429a      	cmp	r2, r3
 8001372:	d004      	beq.n	800137e <__swbuf_r+0x6e>
 8001374:	89a3      	ldrh	r3, [r4, #12]
 8001376:	07db      	lsls	r3, r3, #31
 8001378:	d5e1      	bpl.n	800133e <__swbuf_r+0x2e>
 800137a:	2e0a      	cmp	r6, #10
 800137c:	d1df      	bne.n	800133e <__swbuf_r+0x2e>
 800137e:	4621      	mov	r1, r4
 8001380:	4628      	mov	r0, r5
 8001382:	f7ff ff9d 	bl	80012c0 <_fflush_r>
 8001386:	2800      	cmp	r0, #0
 8001388:	d0d9      	beq.n	800133e <__swbuf_r+0x2e>
 800138a:	e7d6      	b.n	800133a <__swbuf_r+0x2a>

0800138c <__swsetup_r>:
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <__swsetup_r+0xa8>)
 8001390:	4605      	mov	r5, r0
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	460c      	mov	r4, r1
 8001396:	b118      	cbz	r0, 80013a0 <__swsetup_r+0x14>
 8001398:	6a03      	ldr	r3, [r0, #32]
 800139a:	b90b      	cbnz	r3, 80013a0 <__swsetup_r+0x14>
 800139c:	f7ff fa3e 	bl	800081c <__sinit>
 80013a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a4:	0719      	lsls	r1, r3, #28
 80013a6:	d422      	bmi.n	80013ee <__swsetup_r+0x62>
 80013a8:	06da      	lsls	r2, r3, #27
 80013aa:	d407      	bmi.n	80013bc <__swsetup_r+0x30>
 80013ac:	2209      	movs	r2, #9
 80013ae:	602a      	str	r2, [r5, #0]
 80013b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b4:	81a3      	strh	r3, [r4, #12]
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013ba:	e033      	b.n	8001424 <__swsetup_r+0x98>
 80013bc:	0758      	lsls	r0, r3, #29
 80013be:	d512      	bpl.n	80013e6 <__swsetup_r+0x5a>
 80013c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013c2:	b141      	cbz	r1, 80013d6 <__swsetup_r+0x4a>
 80013c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d002      	beq.n	80013d2 <__swsetup_r+0x46>
 80013cc:	4628      	mov	r0, r5
 80013ce:	f7ff fb2d 	bl	8000a2c <_free_r>
 80013d2:	2300      	movs	r3, #0
 80013d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80013d6:	89a3      	ldrh	r3, [r4, #12]
 80013d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013dc:	81a3      	strh	r3, [r4, #12]
 80013de:	2300      	movs	r3, #0
 80013e0:	6063      	str	r3, [r4, #4]
 80013e2:	6923      	ldr	r3, [r4, #16]
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	89a3      	ldrh	r3, [r4, #12]
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	81a3      	strh	r3, [r4, #12]
 80013ee:	6923      	ldr	r3, [r4, #16]
 80013f0:	b94b      	cbnz	r3, 8001406 <__swsetup_r+0x7a>
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013fc:	d003      	beq.n	8001406 <__swsetup_r+0x7a>
 80013fe:	4621      	mov	r1, r4
 8001400:	4628      	mov	r0, r5
 8001402:	f000 f84f 	bl	80014a4 <__smakebuf_r>
 8001406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800140a:	f013 0201 	ands.w	r2, r3, #1
 800140e:	d00a      	beq.n	8001426 <__swsetup_r+0x9a>
 8001410:	2200      	movs	r2, #0
 8001412:	60a2      	str	r2, [r4, #8]
 8001414:	6962      	ldr	r2, [r4, #20]
 8001416:	4252      	negs	r2, r2
 8001418:	61a2      	str	r2, [r4, #24]
 800141a:	6922      	ldr	r2, [r4, #16]
 800141c:	b942      	cbnz	r2, 8001430 <__swsetup_r+0xa4>
 800141e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001422:	d1c5      	bne.n	80013b0 <__swsetup_r+0x24>
 8001424:	bd38      	pop	{r3, r4, r5, pc}
 8001426:	0799      	lsls	r1, r3, #30
 8001428:	bf58      	it	pl
 800142a:	6962      	ldrpl	r2, [r4, #20]
 800142c:	60a2      	str	r2, [r4, #8]
 800142e:	e7f4      	b.n	800141a <__swsetup_r+0x8e>
 8001430:	2000      	movs	r0, #0
 8001432:	e7f7      	b.n	8001424 <__swsetup_r+0x98>
 8001434:	2000000c 	.word	0x2000000c

08001438 <_sbrk_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4d06      	ldr	r5, [pc, #24]	@ (8001454 <_sbrk_r+0x1c>)
 800143c:	2300      	movs	r3, #0
 800143e:	4604      	mov	r4, r0
 8001440:	4608      	mov	r0, r1
 8001442:	602b      	str	r3, [r5, #0]
 8001444:	f7ff f82a 	bl	800049c <_sbrk>
 8001448:	1c43      	adds	r3, r0, #1
 800144a:	d102      	bne.n	8001452 <_sbrk_r+0x1a>
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	b103      	cbz	r3, 8001452 <_sbrk_r+0x1a>
 8001450:	6023      	str	r3, [r4, #0]
 8001452:	bd38      	pop	{r3, r4, r5, pc}
 8001454:	200001bc 	.word	0x200001bc

08001458 <__swhatbuf_r>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	460c      	mov	r4, r1
 800145c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001460:	2900      	cmp	r1, #0
 8001462:	b096      	sub	sp, #88	@ 0x58
 8001464:	4615      	mov	r5, r2
 8001466:	461e      	mov	r6, r3
 8001468:	da0d      	bge.n	8001486 <__swhatbuf_r+0x2e>
 800146a:	89a3      	ldrh	r3, [r4, #12]
 800146c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001470:	f04f 0100 	mov.w	r1, #0
 8001474:	bf14      	ite	ne
 8001476:	2340      	movne	r3, #64	@ 0x40
 8001478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800147c:	2000      	movs	r0, #0
 800147e:	6031      	str	r1, [r6, #0]
 8001480:	602b      	str	r3, [r5, #0]
 8001482:	b016      	add	sp, #88	@ 0x58
 8001484:	bd70      	pop	{r4, r5, r6, pc}
 8001486:	466a      	mov	r2, sp
 8001488:	f000 f848 	bl	800151c <_fstat_r>
 800148c:	2800      	cmp	r0, #0
 800148e:	dbec      	blt.n	800146a <__swhatbuf_r+0x12>
 8001490:	9901      	ldr	r1, [sp, #4]
 8001492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800149a:	4259      	negs	r1, r3
 800149c:	4159      	adcs	r1, r3
 800149e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a2:	e7eb      	b.n	800147c <__swhatbuf_r+0x24>

080014a4 <__smakebuf_r>:
 80014a4:	898b      	ldrh	r3, [r1, #12]
 80014a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014a8:	079d      	lsls	r5, r3, #30
 80014aa:	4606      	mov	r6, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	d507      	bpl.n	80014c0 <__smakebuf_r+0x1c>
 80014b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014b4:	6023      	str	r3, [r4, #0]
 80014b6:	6123      	str	r3, [r4, #16]
 80014b8:	2301      	movs	r3, #1
 80014ba:	6163      	str	r3, [r4, #20]
 80014bc:	b003      	add	sp, #12
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	ab01      	add	r3, sp, #4
 80014c2:	466a      	mov	r2, sp
 80014c4:	f7ff ffc8 	bl	8001458 <__swhatbuf_r>
 80014c8:	9f00      	ldr	r7, [sp, #0]
 80014ca:	4605      	mov	r5, r0
 80014cc:	4639      	mov	r1, r7
 80014ce:	4630      	mov	r0, r6
 80014d0:	f7ff fb18 	bl	8000b04 <_malloc_r>
 80014d4:	b948      	cbnz	r0, 80014ea <__smakebuf_r+0x46>
 80014d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014da:	059a      	lsls	r2, r3, #22
 80014dc:	d4ee      	bmi.n	80014bc <__smakebuf_r+0x18>
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	81a3      	strh	r3, [r4, #12]
 80014e8:	e7e2      	b.n	80014b0 <__smakebuf_r+0xc>
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	6020      	str	r0, [r4, #0]
 80014ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f2:	81a3      	strh	r3, [r4, #12]
 80014f4:	9b01      	ldr	r3, [sp, #4]
 80014f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014fa:	b15b      	cbz	r3, 8001514 <__smakebuf_r+0x70>
 80014fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001500:	4630      	mov	r0, r6
 8001502:	f000 f81d 	bl	8001540 <_isatty_r>
 8001506:	b128      	cbz	r0, 8001514 <__smakebuf_r+0x70>
 8001508:	89a3      	ldrh	r3, [r4, #12]
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	81a3      	strh	r3, [r4, #12]
 8001514:	89a3      	ldrh	r3, [r4, #12]
 8001516:	431d      	orrs	r5, r3
 8001518:	81a5      	strh	r5, [r4, #12]
 800151a:	e7cf      	b.n	80014bc <__smakebuf_r+0x18>

0800151c <_fstat_r>:
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	4d07      	ldr	r5, [pc, #28]	@ (800153c <_fstat_r+0x20>)
 8001520:	2300      	movs	r3, #0
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	602b      	str	r3, [r5, #0]
 800152a:	f7fe ff8e 	bl	800044a <_fstat>
 800152e:	1c43      	adds	r3, r0, #1
 8001530:	d102      	bne.n	8001538 <_fstat_r+0x1c>
 8001532:	682b      	ldr	r3, [r5, #0]
 8001534:	b103      	cbz	r3, 8001538 <_fstat_r+0x1c>
 8001536:	6023      	str	r3, [r4, #0]
 8001538:	bd38      	pop	{r3, r4, r5, pc}
 800153a:	bf00      	nop
 800153c:	200001bc 	.word	0x200001bc

08001540 <_isatty_r>:
 8001540:	b538      	push	{r3, r4, r5, lr}
 8001542:	4d06      	ldr	r5, [pc, #24]	@ (800155c <_isatty_r+0x1c>)
 8001544:	2300      	movs	r3, #0
 8001546:	4604      	mov	r4, r0
 8001548:	4608      	mov	r0, r1
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f7fe ff8d 	bl	800046a <_isatty>
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	d102      	bne.n	800155a <_isatty_r+0x1a>
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	b103      	cbz	r3, 800155a <_isatty_r+0x1a>
 8001558:	6023      	str	r3, [r4, #0]
 800155a:	bd38      	pop	{r3, r4, r5, pc}
 800155c:	200001bc 	.word	0x200001bc

08001560 <_init>:
 8001560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001562:	bf00      	nop
 8001564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001566:	bc08      	pop	{r3}
 8001568:	469e      	mov	lr, r3
 800156a:	4770      	bx	lr

0800156c <_fini>:
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156e:	bf00      	nop
 8001570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001572:	bc08      	pop	{r3}
 8001574:	469e      	mov	lr, r3
 8001576:	4770      	bx	lr
