
2_UART_enable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d8  080003e0  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d8  080003d8  000013e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003d8  080003d8  000013e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003d8  080003e0  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d8  080003d8  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007af  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002da  00000000  00000000  00001bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00001ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005f  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de44  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d9e  00000000  00000000  0000fddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ff54  00000000  00000000  00010b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060acd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000100  00000000  00000000  00060b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00060c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003c0 	.word	0x080003c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003c0 	.word	0x080003c0

080001d8 <fpu_enable>:
#include "stm32f4xx.h"

void fpu_enable(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0

  SCB -> CPACR |= (1<<20);
 80001dc:	4b12      	ldr	r3, [pc, #72]	@ (8000228 <fpu_enable+0x50>)
 80001de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001e2:	4a11      	ldr	r2, [pc, #68]	@ (8000228 <fpu_enable+0x50>)
 80001e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SCB -> CPACR |= (1<<21);
 80001ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <fpu_enable+0x50>)
 80001ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000228 <fpu_enable+0x50>)
 80001f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SCB -> CPACR |= (1<<22);
 80001fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <fpu_enable+0x50>)
 80001fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000202:	4a09      	ldr	r2, [pc, #36]	@ (8000228 <fpu_enable+0x50>)
 8000204:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SCB -> CPACR |= (1<<23);
 800020c:	4b06      	ldr	r3, [pc, #24]	@ (8000228 <fpu_enable+0x50>)
 800020e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000212:	4a05      	ldr	r2, [pc, #20]	@ (8000228 <fpu_enable+0x50>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <main>:




int main()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0

	fpu_enable();
 8000230:	f7ff ffd2 	bl	80001d8 <fpu_enable>
	uart_enable();
 8000234:	f000 f80a 	bl	800024c <uart_enable>

while(1)
{
   GPIOA -> ODR |= (1U << 5);
 8000238:	4b03      	ldr	r3, [pc, #12]	@ (8000248 <main+0x1c>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a02      	ldr	r2, [pc, #8]	@ (8000248 <main+0x1c>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6153      	str	r3, [r2, #20]
 8000244:	e7f8      	b.n	8000238 <main+0xc>
 8000246:	bf00      	nop
 8000248:	40020000 	.word	0x40020000

0800024c <uart_enable>:
#define deg_baud_rate   115200
#define sys_clk         16000000


void uart_enable (void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

 // enabling the UART clock and do the rest



	RCC -> APB1ENR |= (1<<0);
 8000250:	4b1c      	ldr	r3, [pc, #112]	@ (80002c4 <uart_enable+0x78>)
 8000252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000254:	4a1b      	ldr	r2, [pc, #108]	@ (80002c4 <uart_enable+0x78>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6413      	str	r3, [r2, #64]	@ 0x40

	//as the mode is PA2 means the GPIOA 2 pin need to set as alternate function mode
	GPIOA -> MODER  |= (1U<<5);
 800025c:	4b1a      	ldr	r3, [pc, #104]	@ (80002c8 <uart_enable+0x7c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a19      	ldr	r2, [pc, #100]	@ (80002c8 <uart_enable+0x7c>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &=~ (1u<<4);
 8000268:	4b17      	ldr	r3, [pc, #92]	@ (80002c8 <uart_enable+0x7c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a16      	ldr	r2, [pc, #88]	@ (80002c8 <uart_enable+0x7c>)
 800026e:	f023 0310 	bic.w	r3, r3, #16
 8000272:	6013      	str	r3, [r2, #0]

	// set AF07
	GPIOA -> AFR[0] |= (1U<<8);
 8000274:	4b14      	ldr	r3, [pc, #80]	@ (80002c8 <uart_enable+0x7c>)
 8000276:	6a1b      	ldr	r3, [r3, #32]
 8000278:	4a13      	ldr	r2, [pc, #76]	@ (80002c8 <uart_enable+0x7c>)
 800027a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800027e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U<<9);
 8000280:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <uart_enable+0x7c>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a10      	ldr	r2, [pc, #64]	@ (80002c8 <uart_enable+0x7c>)
 8000286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800028a:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U<<10);
 800028c:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <uart_enable+0x7c>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <uart_enable+0x7c>)
 8000292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000296:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &=~ (1U<<11);
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <uart_enable+0x7c>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a0a      	ldr	r2, [pc, #40]	@ (80002c8 <uart_enable+0x7c>)
 800029e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002a2:	6213      	str	r3, [r2, #32]


	//baud rate setting up
	uart_set_baudrate(sys_clk,deg_baud_rate);
 80002a4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80002a8:	4808      	ldr	r0, [pc, #32]	@ (80002cc <uart_enable+0x80>)
 80002aa:	f000 f827 	bl	80002fc <uart_set_baudrate>


	USART2 -> CR1 = (1U<<3) ;
 80002ae:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <uart_enable+0x84>)
 80002b0:	2208      	movs	r2, #8
 80002b2:	60da      	str	r2, [r3, #12]
	USART2 -> CR1 |= (1U<<13);
 80002b4:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <uart_enable+0x84>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a05      	ldr	r2, [pc, #20]	@ (80002d0 <uart_enable+0x84>)
 80002ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002be:	60d3      	str	r3, [r2, #12]




}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020000 	.word	0x40020000
 80002cc:	00f42400 	.word	0x00f42400
 80002d0:	40004400 	.word	0x40004400

080002d4 <compute_baud_rate>:

static uint16_t compute_baud_rate(uint32_t clk, uint32_t baudrate){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]

	return ((clk + (baudrate/2U)) /baudrate);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	085a      	lsrs	r2, r3, #1
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	441a      	add	r2, r3
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ec:	b29b      	uxth	r3, r3

}
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
	...

080002fc <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t clk, uint32_t baudrate){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]

	USART2 -> BRR = compute_baud_rate(clk,baudrate);
 8000306:	6839      	ldr	r1, [r7, #0]
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ffe3 	bl	80002d4 <compute_baud_rate>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b03      	ldr	r3, [pc, #12]	@ (8000320 <uart_set_baudrate+0x24>)
 8000314:	609a      	str	r2, [r3, #8]

}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40004400 	.word	0x40004400

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	@ (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	@ (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	@ (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	@ (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	@ (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 f811 	bl	8000378 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000356:	f7ff ff69 	bl	800022c <main>

0800035a <LoopForever>:

LoopForever:
  b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000368:	080003e0 	.word	0x080003e0
  ldr r2, =_sbss
 800036c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000370:	2000001c 	.word	0x2000001c

08000374 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <__libc_init_array>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	4d0d      	ldr	r5, [pc, #52]	@ (80003b0 <__libc_init_array+0x38>)
 800037c:	4c0d      	ldr	r4, [pc, #52]	@ (80003b4 <__libc_init_array+0x3c>)
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	2600      	movs	r6, #0
 8000384:	42a6      	cmp	r6, r4
 8000386:	d109      	bne.n	800039c <__libc_init_array+0x24>
 8000388:	4d0b      	ldr	r5, [pc, #44]	@ (80003b8 <__libc_init_array+0x40>)
 800038a:	4c0c      	ldr	r4, [pc, #48]	@ (80003bc <__libc_init_array+0x44>)
 800038c:	f000 f818 	bl	80003c0 <_init>
 8000390:	1b64      	subs	r4, r4, r5
 8000392:	10a4      	asrs	r4, r4, #2
 8000394:	2600      	movs	r6, #0
 8000396:	42a6      	cmp	r6, r4
 8000398:	d105      	bne.n	80003a6 <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a0:	4798      	blx	r3
 80003a2:	3601      	adds	r6, #1
 80003a4:	e7ee      	b.n	8000384 <__libc_init_array+0xc>
 80003a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003aa:	4798      	blx	r3
 80003ac:	3601      	adds	r6, #1
 80003ae:	e7f2      	b.n	8000396 <__libc_init_array+0x1e>
 80003b0:	080003d8 	.word	0x080003d8
 80003b4:	080003d8 	.word	0x080003d8
 80003b8:	080003d8 	.word	0x080003d8
 80003bc:	080003dc 	.word	0x080003dc

080003c0 <_init>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr

080003cc <_fini>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr
